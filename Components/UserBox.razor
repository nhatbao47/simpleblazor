@rendermode InteractiveServer
@inject IJSRuntime JsRuntime

<div class="card card-custom mb-4">
    <EditForm Model="formData" OnValidSubmit="HandleValidSubmit" FormName="UserForm">
        <DataAnnotationsValidator />

        <div class="card-header text-center">
            @if (isEditing)
            {
                <InputText class="form-control" name="name" @bind-Value="formData.FullName"
                    maxlength="200" />
                <ValidationMessage For="@(() => formData.FullName)" />
            }
            else
            {
                <h6 class="my-2">
                    <i class="fa fa-user"></i> @formData.FullName
                </h6>
            }
        </div>
        <div class="card-body text-center">
            <p class="my-0">
                <img src="/img/user-icon.jpg" width="200" alt="" />
            </p>
            @if (isEditing)
            {
                <InputText class="form-control mt-2" name="title" @bind-Value="formData.Title"
                    maxlength="100" />
                <ValidationMessage For="@(() => formData.Title)" />
            }
            else
            {
                <p class="">@formData.Title</p>
            }
            <p class="mt-3 mb-2">
                <NavLink class="btn btn-sm btn-custom">
                    <i class="fa fa-calendar-check-o"></i> Schedules
                </NavLink>
            </p>
        </div>
        <div class="card-footer text-center">
            @if (isEditing)
            {
                <button type="submit" class="btn btn-sm btn-outline-success">
                    <i class="fa fa-save"></i> Update
                </button>
                <button type="button" @onclick="CancelEditing" class="btn btn-sm btn-outline-secondary">
                    <i class="fa fa-ban"></i> Cancel
                </button>
            }
            else
            {
                <button type="button" @onclick="@(() => isEditing = true)" class="btn btn-sm btn-outline-secondary">
                    <i class="fa fa-pencil"></i> Edit
                </button>
                <button type="button" @onclick="HandleDelete" class="btn btn-sm btn-danger">
                    <i class="fa fa-times"></i> Remove
                </button>
            }
        </div>
    </EditForm>
</div>

@code {
    private UserModel formData { get; set; }
    private bool isEditing = false;
    [Parameter]
    public UserModel Item { get; set; }

    private void CancelEditing()
    {
        isEditing = false;
        formData = (UserModel)Item.Clone();
    }

    private async Task HandleValidSubmit()
    {
        isEditing = false;
        await OnUserUpdated.InvokeAsync(formData);
    }

    private async Task HandleDelete()
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete '{formData.FullName}' user?");
        if (!confirmed) return;
        await OnUserDeleted.InvokeAsync(formData.Id);
    }

    protected override void OnInitialized()
    {
        if (Item != null)
        {
            formData = (UserModel)Item.Clone();
        }
        else
        {
            formData = new UserModel();
        }
    }

    [Parameter]
    public EventCallback<int> OnUserDeleted { get; set; }

    [Parameter]
    public EventCallback<UserModel> OnUserUpdated { get; set; }
}