@page "/schedules/{Id:int}/edit"
@rendermode InteractiveServer
@inject NavigationManager Navigation
@inject ScheduleService ScheduleService
@inject UserService UserService

<PageTitle>Schedule Composer</PageTitle>
<ErrorMessage Message="@errorMessage" />

<div class="card bg-light">
    <div class="card-header fw-bold">Schedule Composer</div>
    <div class="card-body">
        <EditForm Model="formData" OnValidSubmit="HandleValidSubmit" FormName="ScheduleForm">            
            <DataAnnotationsValidator />

            <div class="mb-2 row">
                <label class="col-md-2 col-form-label">Title</label>
                <div class="col-md-4">
                    <InputText class="form-control" name="title" @bind-Value="formData!.Title" maxlength="200" />
                    <ValidationMessage For="@(() => formData.Title)" />
                </div>
            </div>
            <div class="mb-2 row">
                <label class="col-md-2 col-form-label">Creator</label>
                <div class="col-md-4">
                    <InputSelect class="form-select" name="userId" @bind-Value="formData!.UserId">
                        <option value="">Select...</option>
                        @foreach (var user in users)
                        {
                            <option value="@user.Id">@user.FullName</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => formData.UserId)" />
                </div>
            </div>
            <div class="mb-2 row">
                <label class="col-md-2 col-form-label">Description</label>
                <div class="col-md-10">
                    <InputTextArea class="form-control" name="description" @bind-Value="formData!.Description"
                        rows="3" />
                    <ValidationMessage For="@(() => formData.Description)" />
                </div>
            </div>
            <div class="mb-2 row">
                <label class="col-md-2 col-form-label">Location</label>
                <div class="col-sm-4">
                    <InputText class="form-control" name="location" @bind-Value="formData!.Location" maxlength="100" />
                    <ValidationMessage For="@(() => formData.Location)" />
                </div>
            </div>
            <div class="mb-2 row">
                <label class="col-md-2 col-form-label">Date</label>
                <div class="col-md-2">
                    <DateInput TValue="DateOnly" @bind-Value="formData!.DatePicker" Placeholder="Enter a date" />
                </div>
            </div>
            <div class="mb-2 row">
                <label class="col-md-2 col-form-label">Time</label>
                <div class="col-md-3">
                    <div class="d-flex flex-row">
                        <TimeInput TValue="TimeOnly" @bind-Value="formData!.StartTimePicker" />
                        <span class="mx-2 mt-2">~</span>
                        <TimeInput TValue="TimeOnly" @bind-Value="formData!.EndTimePicker" />
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-2"></div>
                <div class="col-md-10">
                    <button type="submit" class="btn btn-sm btn-primary" disabled="@(!context.Validate())">
                        <i class="fa fa-save"></i> Save
                    </button>
                    <button type="button" @onclick="GoBack" class="btn btn-sm btn-outline-secondary">
                        <i class="fa fa-ban"></i> Cancel
                    </button>
                </div>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    private ScheduleModel? formData { get; set; } = new ScheduleModel();
    private List<UserModel> users = new List<UserModel>();
    private bool addNew = false;
    private string errorMessage = string.Empty;

    [Parameter]
    public int Id { get; set; }

    private void GoBack() => Navigation.NavigateTo("/schedules");

    private async Task HandleValidSubmit()
    {
        try
        {
            formData.StartTime = formData.StartTimePicker.ToString("hh:mm");
            formData.EndTime = formData.EndTimePicker.ToString("hh:mm");
            formData.Date = formData.DatePicker.ToDateTime(TimeOnly.MinValue);

            if (addNew)
            {
                await ScheduleService.CreateScheduleAsync(formData);
            }
            else
            {
                await ScheduleService.UpdateScheduleAsync(formData);
            }

            GoBack();
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to save schedule: {ex.Message}";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        addNew = Id == 0;

        if (addNew)
        {
            formData = new ScheduleModel();
            formData.DatePicker = DateTime.Now.ToDateOnly();
            formData.StartTimePicker = DateTime.Now.ToTimeOnly();
            formData.EndTimePicker = DateTime.Now.ToTimeOnly();
        }
        else
        {
            try
            {
                formData = await ScheduleService.GetScheduleByIdAsync(Id);
                formData.DatePicker = formData.Date.ToDateOnly();
                formData.StartTimePicker = TimeOnly.Parse(formData.StartTime);
                formData.EndTimePicker = TimeOnly.Parse(formData.EndTime);
            }
            catch (Exception ex)
            {
                errorMessage = $"Failed to load schedule: {ex.Message}";
            }
        }

        try
        {
            users = await UserService.GetUsersAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to fetch users: {ex.Message}";
        }
    }
}