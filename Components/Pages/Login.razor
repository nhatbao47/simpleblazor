@page "/login"
@rendermode InteractiveServer
@inject AuthService AuthService
@inject NavigationManager Navigation
@inject StateContainer StateContainer

<PageTitle>Login</PageTitle>

<div class="row">
    <div class="col-md-4"></div>
    <div class="col-md-4">
        <EditForm Model="formData" OnValidSubmit="HandleValidSubmit" FormName="LoginForm">
            <DataAnnotationsValidator />

            <div class="login-form">
                <div class="img-container">
                    <img src="/img/avatar.png" alt="Avatar" class="avatar" />
                </div>
                <div class="container">
                    <div class="form-group mb-2">
                        <label class="label" htmlFor="username"><b>Username</b></label>
                        <InputText class="form-control" placeholder="Enter username" name="username"
                            @bind-Value="formData.Username" />
                        <ValidationMessage For="@(() => formData.Username)" />
                    </div>
                    <div class="form-group mb-2">
                        <label htmlFor="password"><b>Password</b></label>
                        <InputText type="password" class="form-control" placeholder="Enter password" name="password"
                            @bind-Value="formData.Password" />
                        <ValidationMessage For="@(() => formData.Password)" />
                    </div>

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="text-danger">
                            @errorMessage
                        </div>
                    }

                    <button type="submit">Login</button>
                </div>
            </div>
        </EditForm>
    </div>
    <div class="col-md-4"></div>
</div>

@code
{
    private string errorMessage = string.Empty;
    private LoginRequest formData {get;set;} = new LoginRequest();

    private async Task HandleValidSubmit()
    {
        try
        {
            var response = await AuthService.LoginAsync(formData);

            if (string.IsNullOrEmpty(response.Token))
            {
                return;
            }

            StateContainer.AuthUser = response.Username ?? string.Empty;
            StateContainer.AuthToken = response.Token;
            Navigation.NavigateTo("/");
        }
        catch (Exception)
        {
            errorMessage = "Your username or password is not correct";
        }
    }
}
