@page "/schedules"
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime
@inject ScheduleService ScheduleService

<PageTitle>Schedules</PageTitle>
<ErrorMessage Message="@errorMessage" />

<div class="button-group mb-2">
    <NavLink href="/schedules/0/edit" class="btn btn-sm btn-custom">
        <i class="fa fa-calendar-o"></i> Add
    </NavLink>
    <button class="btn btn-sm btn-outline-secondary">
        <i class="fa fa-eraser"></i> Clear filter
    </button>
</div>

@if (isLoading)
{
    <LonelySpinner />
}
else if (schedules == null || schedules.Count == 0)
{
    <p>No schedules found.</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th scope="col"><i class="fa fa-text-width"></i> Title</th>
                <th scope="col"><i class="fa fa-user"></i> Creator</th>
                <th scope="col"><i class="fa fa-paragraph"></i> Description</th>
                <th scope="col"><i class="fa fa-map-marker"></i> Location</th>
                <th scope="col"><i class="fa fa-calendar-o"></i> Date</th>
                <th scope="col"><i class="fa fa-clock-o"></i> Time</th>
                <th scope="col"></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var schedule in schedules)
            {
            <tr>
                <td>@schedule.Title</td>
                <td>@schedule.Creator</td>
                <td>@schedule.Description</td>
                <td>@schedule.Location</td>
                <td>@schedule.Date.AsLocalDate()</td>
                <td>@schedule.StartTime ~ @schedule.EndTime</td>
                <td>
                    <NavLink href="@($"/schedules/{schedule.Id}/detail")" class="btn btn-sm btn-outline-secondary">
                        <i class="fa fa-info-circle"></i> Details
                    </NavLink>
                    <NavLink href="@($"/schedules/{schedule.Id}/edit")" class="btn btn-sm btn-primary">
                        <i class="fa fa-pencil"></i> Edit
                    </NavLink>
                    <button type="button" @onclick="@(() => HandleDelete(schedule))" class="btn btn-sm btn-danger">
                        <i class="fa fa-trash"></i> Delete
                    </button>
                </td>
            </tr>
            }
            
        </tbody>
    </table>
}

@code
{
    private bool isLoading = true;
    private string errorMessage = string.Empty;
    private List<ScheduleModel> schedules = new List<ScheduleModel>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            schedules = await ScheduleService.GetSchedulesAsync();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Failed to load schedules: {ex.Message}");
            schedules = new List<ScheduleModel>();
        }
        finally
        {
            isLoading = false;
        }
        StateHasChanged();
    }

    private async Task HandleDelete(ScheduleModel schedule)
    {
        try
        {
            bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete '{schedule.Title}' schedule?");
            if (!confirmed)
            {
                return;
            }
        
            var isDeleted = await ScheduleService.DeleteScheduleAsync(schedule.Id);
            if (!isDeleted)
            {
                return;
            }

            schedules = schedules.Where(d => d.Id != schedule.Id).ToList();
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to delete schedule: {ex.Message}";
        }
    }
}